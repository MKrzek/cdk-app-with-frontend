"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const tableName = (_a = process.env.TABLE_NAME) !== null && _a !== void 0 ? _a : "";
const dynamodb = new AWS.DynamoDB.DocumentClient();
const createResponse = (body, statusCode = 200) => ({
    statusCode,
    body: JSON.stringify(body, null, 2)
});
const getAllTodos = async () => {
    return await dynamodb.scan({
        TableName: tableName
    }).promise();
};
const addTodoItem = async (data) => {
    const { id, todo } = data;
    if (todo && todo !== "") {
        await dynamodb.put({
            TableName: tableName,
            Item: {
                id: "totally_random_id",
                todo
            }
        }).promise();
    }
    return todo;
};
exports.handler = async function (event) {
    var _a;
    try {
        const { httpMethod, body: requestBody } = event;
        if (httpMethod === "GET") {
            const response = await getAllTodos();
            return createResponse((_a = response === null || response === void 0 ? void 0 : response.Items) !== null && _a !== void 0 ? _a : []);
        }
        if (requestBody == null) {
            return createResponse('missing request body', 500);
        }
        const data = JSON.parse(requestBody);
        if (httpMethod === "POST") {
            const todo = await addTodoItem(data);
            return todo ? createResponse(`${todo} added to the database`)
                : createResponse('Todo is  missing', 500);
        }
        return createResponse(`We only accept GET request for now, not ${httpMethod}`);
    }
    catch (error) {
        console.log('error', error);
        return createResponse(error, 500);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9kb0hhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0b2RvSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQkFBK0I7QUFDL0IsTUFBTSxTQUFTLFNBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLG1DQUFJLEVBQUUsQ0FBQztBQUMvQyxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUE7QUFFbEQsTUFBTSxjQUFjLEdBQUcsQ0FDbkIsSUFBbUQsRUFDbkQsVUFBVSxHQUFHLEdBQUcsRUFDbEIsRUFBRSxDQUFDLENBQUM7SUFDRixVQUFVO0lBQ1YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Q0FDdEMsQ0FBQyxDQUFBO0FBQ0YsTUFBTSxXQUFXLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDM0IsT0FBTyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsU0FBUyxFQUFFLFNBQVM7S0FDdkIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBRWhCLENBQUMsQ0FBQTtBQUNELE1BQU0sV0FBVyxHQUFHLEtBQUssRUFBRSxJQUFrQyxFQUFFLEVBQUU7SUFDN0QsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUE7SUFDekIsSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUUsRUFBRTtRQUNyQixNQUFNLFFBQVEsQ0FBQyxHQUFHLENBQUM7WUFDZixTQUFTLEVBQUUsU0FBUztZQUNwQixJQUFJLEVBQUU7Z0JBQ0YsRUFBRSxFQUFFLG1CQUFtQjtnQkFDdkIsSUFBSTthQUNQO1NBQ0osQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0tBQ2Y7SUFDRCxPQUFPLElBQUksQ0FBQTtBQUNmLENBQUMsQ0FBQTtBQUVELE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxXQUFXLEtBQWdDOztJQUM5RCxJQUFJO1FBQ0EsTUFBTSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFBO1FBQy9DLElBQUksVUFBVSxLQUFLLEtBQUssRUFBRTtZQUN0QixNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO1lBQ3JDLE9BQU8sY0FBYyxPQUFDLFFBQVEsYUFBUixRQUFRLHVCQUFSLFFBQVEsQ0FBRSxLQUFLLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsSUFBSSxXQUFXLElBQUksSUFBSSxFQUFFO1lBQ3JCLE9BQU8sY0FBYyxDQUFDLHNCQUFzQixFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQ3JEO1FBQ0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUVwQyxJQUFJLFVBQVUsS0FBSyxNQUFNLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEdBQUcsTUFBTSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7WUFFcEMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLElBQUksd0JBQXdCLENBQUM7Z0JBQ3pELENBQUMsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUE7U0FDaEQ7UUFFRCxPQUFPLGNBQWMsQ0FBQywyQ0FBMkMsVUFBVSxFQUFFLENBQUMsQ0FBQztLQUNsRjtJQUNELE9BQU8sS0FBSyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUIsT0FBTyxjQUFjLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ3JDO0FBQ0wsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpXG5jb25zdCB0YWJsZU5hbWUgPSBwcm9jZXNzLmVudi5UQUJMRV9OQU1FID8/IFwiXCI7XG5jb25zdCBkeW5hbW9kYiA9IG5ldyBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKVxuXG5jb25zdCBjcmVhdGVSZXNwb25zZSA9IChcbiAgICBib2R5OiBzdHJpbmcgfCBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQuSXRlbUxpc3QsXG4gICAgc3RhdHVzQ29kZSA9IDIwMFxuKSA9PiAoe1xuICAgIHN0YXR1c0NvZGUsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSwgbnVsbCwgMilcbn0pXG5jb25zdCBnZXRBbGxUb2RvcyA9IGFzeW5jICgpID0+IHtcbiAgICByZXR1cm4gYXdhaXQgZHluYW1vZGIuc2Nhbih7XG4gICAgICAgIFRhYmxlTmFtZTogdGFibGVOYW1lXG4gICAgfSkucHJvbWlzZSgpXG5cbn1cbmNvbnN0IGFkZFRvZG9JdGVtID0gYXN5bmMgKGRhdGE6IHsgdG9kbzogc3RyaW5nLCBpZDogc3RyaW5nIH0pID0+IHtcbiAgICBjb25zdCB7IGlkLCB0b2RvIH0gPSBkYXRhXG4gICAgaWYgKHRvZG8gJiYgdG9kbyAhPT0gXCJcIikge1xuICAgICAgICBhd2FpdCBkeW5hbW9kYi5wdXQoe1xuICAgICAgICAgICAgVGFibGVOYW1lOiB0YWJsZU5hbWUsXG4gICAgICAgICAgICBJdGVtOiB7XG4gICAgICAgICAgICAgICAgaWQ6IFwidG90YWxseV9yYW5kb21faWRcIixcbiAgICAgICAgICAgICAgICB0b2RvXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLnByb21pc2UoKVxuICAgIH1cbiAgICByZXR1cm4gdG9kb1xufVxuXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyBmdW5jdGlvbiAoZXZlbnQ6IEFXU0xhbWJkYS5BUElHYXRld2F5RXZlbnQpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGh0dHBNZXRob2QsIGJvZHk6IHJlcXVlc3RCb2R5IH0gPSBldmVudFxuICAgICAgICBpZiAoaHR0cE1ldGhvZCA9PT0gXCJHRVRcIikge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBnZXRBbGxUb2RvcygpO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlc3BvbnNlKHJlc3BvbnNlPy5JdGVtcyA/PyBbXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVxdWVzdEJvZHkgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlc3BvbnNlKCdtaXNzaW5nIHJlcXVlc3QgYm9keScsIDUwMClcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXF1ZXN0Qm9keSlcblxuICAgICAgICBpZiAoaHR0cE1ldGhvZCA9PT0gXCJQT1NUXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvZG8gPSBhd2FpdCBhZGRUb2RvSXRlbShkYXRhKVxuXG4gICAgICAgICAgICByZXR1cm4gdG9kbyA/IGNyZWF0ZVJlc3BvbnNlKGAke3RvZG99IGFkZGVkIHRvIHRoZSBkYXRhYmFzZWApXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVSZXNwb25zZSgnVG9kbyBpcyAgbWlzc2luZycsIDUwMClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjcmVhdGVSZXNwb25zZShgV2Ugb25seSBhY2NlcHQgR0VUIHJlcXVlc3QgZm9yIG5vdywgbm90ICR7aHR0cE1ldGhvZH1gKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJlc3BvbnNlKGVycm9yLCA1MDApO1xuICAgIH1cbn0iXX0=