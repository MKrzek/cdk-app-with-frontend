"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const tableName = (_a = process.env.TABLE_NAME) !== null && _a !== void 0 ? _a : "";
const dynamodb = new AWS.DynamoDB.DocumentClient();
const createResponse = (body, statusCode = 200) => ({
    statusCode,
    body: JSON.stringify(body, null, 2)
});
const getAllTodos = async () => {
    return await dynamodb.scan({
        TableName: tableName
    }).promise();
};
const addTodoItem = async (data) => {
    const { id, todo } = data;
    if (todo && todo !== "") {
        await dynamodb.put({
            TableName: tableName,
            Item: {
                id: "totally_random_id",
                todo
            }
        }).promise();
    }
    return todo;
};
const deleteTodoItem = async (data) => {
    const { id } = data;
    if (id && id !== "") {
        await dynamodb.delete({
            TableName: tableName,
            Key: {
                id
            }
        }).promise();
    }
    return id;
};
exports.handler = async function (event) {
    var _a;
    try {
        const { httpMethod, body: requestBody } = event;
        if (httpMethod === "GET") {
            const response = await getAllTodos();
            return createResponse((_a = response === null || response === void 0 ? void 0 : response.Items) !== null && _a !== void 0 ? _a : []);
        }
        if (requestBody == null) {
            return createResponse('missing request body', 500);
        }
        const data = JSON.parse(requestBody);
        if (httpMethod === "POST") {
            const todo = await addTodoItem(data);
            return todo ? createResponse(`${todo} added to the database`)
                : createResponse('Todo is  missing', 500);
        }
        if (httpMethod === 'DELETE') {
            const id = await deleteTodoItem(data);
            return id ? createResponse(`Todo item with id: ${id} was delted`) : createResponse("ID missing", 500);
        }
        return createResponse(`We only accept GET,POST, OPTIONS, and DELETE request for now, not ${httpMethod}`);
    }
    catch (error) {
        console.log('error', error);
        return createResponse(error, 500);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9kb0hhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0b2RvSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQkFBK0I7QUFDL0IsTUFBTSxTQUFTLFNBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLG1DQUFJLEVBQUUsQ0FBQztBQUMvQyxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUE7QUFFbEQsTUFBTSxjQUFjLEdBQUcsQ0FDbkIsSUFBbUQsRUFDbkQsVUFBVSxHQUFHLEdBQUcsRUFDbEIsRUFBRSxDQUFDLENBQUM7SUFDRixVQUFVO0lBQ1YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Q0FDdEMsQ0FBQyxDQUFBO0FBQ0YsTUFBTSxXQUFXLEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDM0IsT0FBTyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkIsU0FBUyxFQUFFLFNBQVM7S0FDdkIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0FBRWhCLENBQUMsQ0FBQTtBQUNELE1BQU0sV0FBVyxHQUFHLEtBQUssRUFBRSxJQUFrQyxFQUFFLEVBQUU7SUFDN0QsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUE7SUFDekIsSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUUsRUFBRTtRQUNyQixNQUFNLFFBQVEsQ0FBQyxHQUFHLENBQUM7WUFDZixTQUFTLEVBQUUsU0FBUztZQUNwQixJQUFJLEVBQUU7Z0JBQ0YsRUFBRSxFQUFFLG1CQUFtQjtnQkFDdkIsSUFBSTthQUNQO1NBQ0osQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0tBQ2Y7SUFDRCxPQUFPLElBQUksQ0FBQTtBQUNmLENBQUMsQ0FBQTtBQUNELE1BQU0sY0FBYyxHQUFHLEtBQUssRUFBRSxJQUFvQixFQUFFLEVBQUU7SUFDbEQsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQTtJQUNuQixJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ2pCLE1BQU0sUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUNsQixTQUFTLEVBQUUsU0FBUztZQUNwQixHQUFHLEVBQUU7Z0JBQ0QsRUFBRTthQUNMO1NBQ0osQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO0tBQ2Y7SUFDRCxPQUFPLEVBQUUsQ0FBQTtBQUdiLENBQUMsQ0FBQTtBQUVELE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxXQUFXLEtBQWdDOztJQUM5RCxJQUFJO1FBQ0EsTUFBTSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFBO1FBQy9DLElBQUksVUFBVSxLQUFLLEtBQUssRUFBRTtZQUN0QixNQUFNLFFBQVEsR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO1lBQ3JDLE9BQU8sY0FBYyxPQUFDLFFBQVEsYUFBUixRQUFRLHVCQUFSLFFBQVEsQ0FBRSxLQUFLLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsSUFBSSxXQUFXLElBQUksSUFBSSxFQUFFO1lBQ3JCLE9BQU8sY0FBYyxDQUFDLHNCQUFzQixFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQ3JEO1FBQ0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUVwQyxJQUFJLFVBQVUsS0FBSyxNQUFNLEVBQUU7WUFDdkIsTUFBTSxJQUFJLEdBQUcsTUFBTSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7WUFFcEMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLElBQUksd0JBQXdCLENBQUM7Z0JBQ3pELENBQUMsQ0FBQyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUE7U0FDaEQ7UUFDRCxJQUFJLFVBQVUsS0FBSyxRQUFRLEVBQUU7WUFDekIsTUFBTSxFQUFFLEdBQUcsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDckMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQTtTQUN4RztRQUVELE9BQU8sY0FBYyxDQUFDLHFFQUFxRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0tBQzVHO0lBQ0QsT0FBTyxLQUFLLEVBQUU7UUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1QixPQUFPLGNBQWMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDckM7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJylcbmNvbnN0IHRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgPz8gXCJcIjtcbmNvbnN0IGR5bmFtb2RiID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpXG5cbmNvbnN0IGNyZWF0ZVJlc3BvbnNlID0gKFxuICAgIGJvZHk6IHN0cmluZyB8IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudC5JdGVtTGlzdCxcbiAgICBzdGF0dXNDb2RlID0gMjAwXG4pID0+ICh7XG4gICAgc3RhdHVzQ29kZSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5LCBudWxsLCAyKVxufSlcbmNvbnN0IGdldEFsbFRvZG9zID0gYXN5bmMgKCkgPT4ge1xuICAgIHJldHVybiBhd2FpdCBkeW5hbW9kYi5zY2FuKHtcbiAgICAgICAgVGFibGVOYW1lOiB0YWJsZU5hbWVcbiAgICB9KS5wcm9taXNlKClcblxufVxuY29uc3QgYWRkVG9kb0l0ZW0gPSBhc3luYyAoZGF0YTogeyB0b2RvOiBzdHJpbmcsIGlkOiBzdHJpbmcgfSkgPT4ge1xuICAgIGNvbnN0IHsgaWQsIHRvZG8gfSA9IGRhdGFcbiAgICBpZiAodG9kbyAmJiB0b2RvICE9PSBcIlwiKSB7XG4gICAgICAgIGF3YWl0IGR5bmFtb2RiLnB1dCh7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IHRhYmxlTmFtZSxcbiAgICAgICAgICAgIEl0ZW06IHtcbiAgICAgICAgICAgICAgICBpZDogXCJ0b3RhbGx5X3JhbmRvbV9pZFwiLFxuICAgICAgICAgICAgICAgIHRvZG9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkucHJvbWlzZSgpXG4gICAgfVxuICAgIHJldHVybiB0b2RvXG59XG5jb25zdCBkZWxldGVUb2RvSXRlbSA9IGFzeW5jIChkYXRhOiB7IGlkOiBzdHJpbmcgfSkgPT4ge1xuICAgIGNvbnN0IHsgaWQgfSA9IGRhdGFcbiAgICBpZiAoaWQgJiYgaWQgIT09IFwiXCIpIHtcbiAgICAgICAgYXdhaXQgZHluYW1vZGIuZGVsZXRlKHtcbiAgICAgICAgICAgIFRhYmxlTmFtZTogdGFibGVOYW1lLFxuICAgICAgICAgICAgS2V5OiB7XG4gICAgICAgICAgICAgICAgaWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkucHJvbWlzZSgpXG4gICAgfVxuICAgIHJldHVybiBpZFxuXG5cbn1cblxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgZnVuY3Rpb24gKGV2ZW50OiBBV1NMYW1iZGEuQVBJR2F0ZXdheUV2ZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBodHRwTWV0aG9kLCBib2R5OiByZXF1ZXN0Qm9keSB9ID0gZXZlbnRcbiAgICAgICAgaWYgKGh0dHBNZXRob2QgPT09IFwiR0VUXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0QWxsVG9kb3MoKTtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVSZXNwb25zZShyZXNwb25zZT8uSXRlbXMgPz8gW10pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlcXVlc3RCb2R5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVSZXNwb25zZSgnbWlzc2luZyByZXF1ZXN0IGJvZHknLCA1MDApXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmVxdWVzdEJvZHkpXG5cbiAgICAgICAgaWYgKGh0dHBNZXRob2QgPT09IFwiUE9TVFwiKSB7XG4gICAgICAgICAgICBjb25zdCB0b2RvID0gYXdhaXQgYWRkVG9kb0l0ZW0oZGF0YSlcblxuICAgICAgICAgICAgcmV0dXJuIHRvZG8gPyBjcmVhdGVSZXNwb25zZShgJHt0b2RvfSBhZGRlZCB0byB0aGUgZGF0YWJhc2VgKVxuICAgICAgICAgICAgICAgIDogY3JlYXRlUmVzcG9uc2UoJ1RvZG8gaXMgIG1pc3NpbmcnLCA1MDApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBNZXRob2QgPT09ICdERUxFVEUnKSB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IGF3YWl0IGRlbGV0ZVRvZG9JdGVtKGRhdGEpXG4gICAgICAgICAgICByZXR1cm4gaWQgPyBjcmVhdGVSZXNwb25zZShgVG9kbyBpdGVtIHdpdGggaWQ6ICR7aWR9IHdhcyBkZWx0ZWRgKSA6IGNyZWF0ZVJlc3BvbnNlKFwiSUQgbWlzc2luZ1wiLCA1MDApXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3JlYXRlUmVzcG9uc2UoYFdlIG9ubHkgYWNjZXB0IEdFVCxQT1NULCBPUFRJT05TLCBhbmQgREVMRVRFIHJlcXVlc3QgZm9yIG5vdywgbm90ICR7aHR0cE1ldGhvZH1gKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJlc3BvbnNlKGVycm9yLCA1MDApO1xuICAgIH1cbn0iXX0=