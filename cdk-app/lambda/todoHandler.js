"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const uuid_1 = require("uuid");
const tableName = (_a = process.env.TABLE_NAME) !== null && _a !== void 0 ? _a : "";
const dynamodb = new AWS.DynamoDB.DocumentClient();
const createResponse = (body, statusCode = 200) => ({
    statusCode,
    headers: {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "OPTIONS,GET,POST,DELETE"
    },
    body: JSON.stringify(body, null, 2)
});
const getAllTodos = async () => await dynamodb.scan({
    TableName: tableName
}).promise();
const addTodoItem = async (data) => {
    const { id, todo } = data;
    if (todo && todo !== "") {
        await dynamodb.put({
            TableName: tableName,
            Item: {
                id: id || uuid_1.v4(),
                todo
            }
        }).promise();
    }
    return todo;
};
const deleteTodoItem = async (data) => {
    const { id } = data;
    if (id && id !== "") {
        await dynamodb.delete({
            TableName: tableName,
            Key: {
                id
            }
        }).promise();
    }
    return id;
};
exports.handler = async function (event) {
    var _a;
    try {
        const { httpMethod, body: requestBody } = event;
        if (httpMethod === "OPTIONS") {
            return createResponse('ok');
        }
        if (httpMethod === "GET") {
            const response = await getAllTodos();
            return createResponse((_a = response === null || response === void 0 ? void 0 : response.Items) !== null && _a !== void 0 ? _a : []);
        }
        if (requestBody == null) {
            return createResponse('missing request body', 500);
        }
        const data = JSON.parse(requestBody);
        if (httpMethod === "POST") {
            const todo = await addTodoItem(data);
            return todo ? createResponse(`${todo} added to the database`)
                : createResponse('Todo is  missing', 500);
        }
        if (httpMethod === 'DELETE') {
            const id = await deleteTodoItem(data);
            return id ? createResponse(`Todo item with id: ${id} was delted`) : createResponse("ID missing", 500);
        }
        return createResponse(`We only accept GET,POST, OPTIONS, and DELETE request for now, not ${httpMethod}`);
    }
    catch (error) {
        console.log('error', error);
        return createResponse(error, 500);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9kb0hhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0b2RvSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwrQkFBZ0M7QUFDaEMsK0JBQWtDO0FBQ2xDLE1BQU0sU0FBUyxTQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxtQ0FBSSxFQUFFLENBQUM7QUFDL0MsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBR25ELE1BQU0sY0FBYyxHQUFHLENBQ25CLElBQW1ELEVBQ25ELFVBQVUsR0FBRyxHQUFHLEVBQ2xCLEVBQUUsQ0FBQyxDQUFDO0lBQ0YsVUFBVTtJQUNWLE9BQU8sRUFBRTtRQUNMLDZCQUE2QixFQUFFLEdBQUc7UUFDbEMsOEJBQThCLEVBQUUseUJBQXlCO0tBQzVEO0lBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Q0FDdEMsQ0FBQyxDQUFBO0FBQ0YsTUFBTSxXQUFXLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FDM0IsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ2hCLFNBQVMsRUFBRSxTQUFTO0NBQ3ZCLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtBQUdoQixNQUFNLFdBQVcsR0FBRyxLQUFLLEVBQUUsSUFBa0MsRUFBRSxFQUFFO0lBQzdELE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFBO0lBQ3pCLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFLEVBQUU7UUFDckIsTUFBTSxRQUFRLENBQUMsR0FBRyxDQUFDO1lBQ2YsU0FBUyxFQUFFLFNBQVM7WUFDcEIsSUFBSSxFQUFFO2dCQUNGLEVBQUUsRUFBRSxFQUFFLElBQUksU0FBSSxFQUFFO2dCQUNoQixJQUFJO2FBQ1A7U0FDSixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7S0FDZjtJQUNELE9BQU8sSUFBSSxDQUFBO0FBQ2YsQ0FBQyxDQUFBO0FBQ0QsTUFBTSxjQUFjLEdBQUcsS0FBSyxFQUFFLElBQW9CLEVBQUUsRUFBRTtJQUNsRCxNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFBO0lBQ25CLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDakIsTUFBTSxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ2xCLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLEdBQUcsRUFBRTtnQkFDRCxFQUFFO2FBQ0w7U0FDSixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7S0FDZjtJQUNELE9BQU8sRUFBRSxDQUFBO0FBR2IsQ0FBQyxDQUFBO0FBRUQsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLFdBQVcsS0FBZ0M7O0lBQzlELElBQUk7UUFDQSxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsR0FBRyxLQUFLLENBQUE7UUFFL0MsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQzFCLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFBO1NBQzlCO1FBQ0QsSUFBSSxVQUFVLEtBQUssS0FBSyxFQUFFO1lBQ3RCLE1BQU0sUUFBUSxHQUFHLE1BQU0sV0FBVyxFQUFFLENBQUM7WUFDckMsT0FBTyxjQUFjLE9BQUMsUUFBUSxhQUFSLFFBQVEsdUJBQVIsUUFBUSxDQUFFLEtBQUssbUNBQUksRUFBRSxDQUFDLENBQUM7U0FDaEQ7UUFFRCxJQUFJLFdBQVcsSUFBSSxJQUFJLEVBQUU7WUFDckIsT0FBTyxjQUFjLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxDQUFDLENBQUE7U0FDckQ7UUFDRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBRXBDLElBQUksVUFBVSxLQUFLLE1BQU0sRUFBRTtZQUN2QixNQUFNLElBQUksR0FBRyxNQUFNLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUVwQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQztnQkFDekQsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQTtTQUNoRDtRQUNELElBQUksVUFBVSxLQUFLLFFBQVEsRUFBRTtZQUN6QixNQUFNLEVBQUUsR0FBRyxNQUFNLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNyQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLHNCQUFzQixFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQ3hHO1FBRUQsT0FBTyxjQUFjLENBQUMscUVBQXFFLFVBQVUsRUFBRSxDQUFDLENBQUM7S0FDNUc7SUFDRCxPQUFPLEtBQUssRUFBRTtRQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzVCLE9BQU8sY0FBYyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNyQztBQUNMLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcbmltcG9ydCB7IHY0IGFzIHV1aWQgfSBmcm9tICd1dWlkJztcbmNvbnN0IHRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LlRBQkxFX05BTUUgPz8gXCJcIjtcbmNvbnN0IGR5bmFtb2RiID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuXG5cbmNvbnN0IGNyZWF0ZVJlc3BvbnNlID0gKFxuICAgIGJvZHk6IHN0cmluZyB8IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudC5JdGVtTGlzdCxcbiAgICBzdGF0dXNDb2RlID0gMjAwXG4pID0+ICh7XG4gICAgc3RhdHVzQ29kZSxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCI6IFwiKlwiLFxuICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIjogXCJPUFRJT05TLEdFVCxQT1NULERFTEVURVwiXG4gICAgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5LCBudWxsLCAyKVxufSlcbmNvbnN0IGdldEFsbFRvZG9zID0gYXN5bmMgKCkgPT5cbiAgICBhd2FpdCBkeW5hbW9kYi5zY2FuKHtcbiAgICAgICAgVGFibGVOYW1lOiB0YWJsZU5hbWVcbiAgICB9KS5wcm9taXNlKClcblxuXG5jb25zdCBhZGRUb2RvSXRlbSA9IGFzeW5jIChkYXRhOiB7IHRvZG86IHN0cmluZywgaWQ6IHN0cmluZyB9KSA9PiB7XG4gICAgY29uc3QgeyBpZCwgdG9kbyB9ID0gZGF0YVxuICAgIGlmICh0b2RvICYmIHRvZG8gIT09IFwiXCIpIHtcbiAgICAgICAgYXdhaXQgZHluYW1vZGIucHV0KHtcbiAgICAgICAgICAgIFRhYmxlTmFtZTogdGFibGVOYW1lLFxuICAgICAgICAgICAgSXRlbToge1xuICAgICAgICAgICAgICAgIGlkOiBpZCB8fCB1dWlkKCksXG4gICAgICAgICAgICAgICAgdG9kb1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5wcm9taXNlKClcbiAgICB9XG4gICAgcmV0dXJuIHRvZG9cbn1cbmNvbnN0IGRlbGV0ZVRvZG9JdGVtID0gYXN5bmMgKGRhdGE6IHsgaWQ6IHN0cmluZyB9KSA9PiB7XG4gICAgY29uc3QgeyBpZCB9ID0gZGF0YVxuICAgIGlmIChpZCAmJiBpZCAhPT0gXCJcIikge1xuICAgICAgICBhd2FpdCBkeW5hbW9kYi5kZWxldGUoe1xuICAgICAgICAgICAgVGFibGVOYW1lOiB0YWJsZU5hbWUsXG4gICAgICAgICAgICBLZXk6IHtcbiAgICAgICAgICAgICAgICBpZFxuICAgICAgICAgICAgfVxuICAgICAgICB9KS5wcm9taXNlKClcbiAgICB9XG4gICAgcmV0dXJuIGlkXG5cblxufVxuXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyBmdW5jdGlvbiAoZXZlbnQ6IEFXU0xhbWJkYS5BUElHYXRld2F5RXZlbnQpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGh0dHBNZXRob2QsIGJvZHk6IHJlcXVlc3RCb2R5IH0gPSBldmVudFxuXG4gICAgICAgIGlmIChodHRwTWV0aG9kID09PSBcIk9QVElPTlNcIikge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlc3BvbnNlKCdvaycpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBNZXRob2QgPT09IFwiR0VUXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0QWxsVG9kb3MoKTtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVSZXNwb25zZShyZXNwb25zZT8uSXRlbXMgPz8gW10pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlcXVlc3RCb2R5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVSZXNwb25zZSgnbWlzc2luZyByZXF1ZXN0IGJvZHknLCA1MDApXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmVxdWVzdEJvZHkpXG5cbiAgICAgICAgaWYgKGh0dHBNZXRob2QgPT09IFwiUE9TVFwiKSB7XG4gICAgICAgICAgICBjb25zdCB0b2RvID0gYXdhaXQgYWRkVG9kb0l0ZW0oZGF0YSlcblxuICAgICAgICAgICAgcmV0dXJuIHRvZG8gPyBjcmVhdGVSZXNwb25zZShgJHt0b2RvfSBhZGRlZCB0byB0aGUgZGF0YWJhc2VgKVxuICAgICAgICAgICAgICAgIDogY3JlYXRlUmVzcG9uc2UoJ1RvZG8gaXMgIG1pc3NpbmcnLCA1MDApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh0dHBNZXRob2QgPT09ICdERUxFVEUnKSB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IGF3YWl0IGRlbGV0ZVRvZG9JdGVtKGRhdGEpXG4gICAgICAgICAgICByZXR1cm4gaWQgPyBjcmVhdGVSZXNwb25zZShgVG9kbyBpdGVtIHdpdGggaWQ6ICR7aWR9IHdhcyBkZWx0ZWRgKSA6IGNyZWF0ZVJlc3BvbnNlKFwiSUQgbWlzc2luZ1wiLCA1MDApXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3JlYXRlUmVzcG9uc2UoYFdlIG9ubHkgYWNjZXB0IEdFVCxQT1NULCBPUFRJT05TLCBhbmQgREVMRVRFIHJlcXVlc3QgZm9yIG5vdywgbm90ICR7aHR0cE1ldGhvZH1gKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJlc3BvbnNlKGVycm9yLCA1MDApO1xuICAgIH1cbn0iXX0=